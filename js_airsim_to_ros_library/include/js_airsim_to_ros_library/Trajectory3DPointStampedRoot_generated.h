// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_TRAJECTORY3DPOINTSTAMPEDROOT_AIRSIM_TO_ROS_H_
#define FLATBUFFERS_GENERATED_TRAJECTORY3DPOINTSTAMPEDROOT_AIRSIM_TO_ROS_H_

#include "flatbuffers/flatbuffers.h"

#include "Point_generated.h"
#include "Pose_generated.h"
#include "Quaternion_generated.h"
#include "time_generated.h"

namespace airsim_to_ros {

struct Trajectory3DPointStamped;

struct Trajectory3DPointStamped FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_TIME = 4,
    VT_POSE = 6
  };
  const time *time() const {
    return GetStruct<const time *>(VT_TIME);
  }
  const Pose *pose() const {
    return GetStruct<const Pose *>(VT_POSE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<time>(verifier, VT_TIME) &&
           VerifyField<Pose>(verifier, VT_POSE) &&
           verifier.EndTable();
  }
};

struct Trajectory3DPointStampedBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_time(const time *time) {
    fbb_.AddStruct(Trajectory3DPointStamped::VT_TIME, time);
  }
  void add_pose(const Pose *pose) {
    fbb_.AddStruct(Trajectory3DPointStamped::VT_POSE, pose);
  }
  explicit Trajectory3DPointStampedBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  Trajectory3DPointStampedBuilder &operator=(const Trajectory3DPointStampedBuilder &);
  flatbuffers::Offset<Trajectory3DPointStamped> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Trajectory3DPointStamped>(end);
    return o;
  }
};

inline flatbuffers::Offset<Trajectory3DPointStamped> CreateTrajectory3DPointStamped(
    flatbuffers::FlatBufferBuilder &_fbb,
    const time *time = 0,
    const Pose *pose = 0) {
  Trajectory3DPointStampedBuilder builder_(_fbb);
  builder_.add_pose(pose);
  builder_.add_time(time);
  return builder_.Finish();
}

inline const airsim_to_ros::Trajectory3DPointStamped *GetTrajectory3DPointStamped(const void *buf) {
  return flatbuffers::GetRoot<airsim_to_ros::Trajectory3DPointStamped>(buf);
}

inline bool VerifyTrajectory3DPointStampedBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<airsim_to_ros::Trajectory3DPointStamped>(nullptr);
}

inline void FinishTrajectory3DPointStampedBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<airsim_to_ros::Trajectory3DPointStamped> root) {
  fbb.Finish(root);
}

}  // namespace airsim_to_ros

#endif  // FLATBUFFERS_GENERATED_TRAJECTORY3DPOINTSTAMPEDROOT_AIRSIM_TO_ROS_H_
