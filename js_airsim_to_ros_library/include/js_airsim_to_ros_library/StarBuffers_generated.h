// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_STARBUFFERS_H_
#define FLATBUFFERS_GENERATED_STARBUFFERS_H_

#include "flatbuffers/flatbuffers.h"

struct StarBuffer;

struct StarBuffer FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_RADIUS = 4,
    VT_MASS = 6,
    VT_VOLUME = 8
  };
  double radius() const {
    return GetField<double>(VT_RADIUS, 0.0);
  }
  double mass() const {
    return GetField<double>(VT_MASS, 0.0);
  }
  double volume() const {
    return GetField<double>(VT_VOLUME, 0.0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<double>(verifier, VT_RADIUS) &&
           VerifyField<double>(verifier, VT_MASS) &&
           VerifyField<double>(verifier, VT_VOLUME) &&
           verifier.EndTable();
  }
};

struct StarBufferBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_radius(double radius) {
    fbb_.AddElement<double>(StarBuffer::VT_RADIUS, radius, 0.0);
  }
  void add_mass(double mass) {
    fbb_.AddElement<double>(StarBuffer::VT_MASS, mass, 0.0);
  }
  void add_volume(double volume) {
    fbb_.AddElement<double>(StarBuffer::VT_VOLUME, volume, 0.0);
  }
  explicit StarBufferBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  StarBufferBuilder &operator=(const StarBufferBuilder &);
  flatbuffers::Offset<StarBuffer> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<StarBuffer>(end);
    return o;
  }
};

inline flatbuffers::Offset<StarBuffer> CreateStarBuffer(
    flatbuffers::FlatBufferBuilder &_fbb,
    double radius = 0.0,
    double mass = 0.0,
    double volume = 0.0) {
  StarBufferBuilder builder_(_fbb);
  builder_.add_volume(volume);
  builder_.add_mass(mass);
  builder_.add_radius(radius);
  return builder_.Finish();
}

inline const StarBuffer *GetStarBuffer(const void *buf) {
  return flatbuffers::GetRoot<StarBuffer>(buf);
}

inline bool VerifyStarBufferBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<StarBuffer>(nullptr);
}

inline void FinishStarBufferBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<StarBuffer> root) {
  fbb.Finish(root);
}

#endif  // FLATBUFFERS_GENERATED_STARBUFFERS_H_
