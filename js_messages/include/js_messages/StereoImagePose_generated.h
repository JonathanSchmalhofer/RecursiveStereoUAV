// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_STEREOIMAGEPOSE_AIRSIM_TO_ROS_H_
#define FLATBUFFERS_GENERATED_STEREOIMAGEPOSE_AIRSIM_TO_ROS_H_

#include "flatbuffers/flatbuffers.h"

#include "Header_generated.h"
#include "OrientationRPY_generated.h"
#include "PointRPY_generated.h"
#include "PoseRPY_generated.h"
#include "StereoImage_generated.h"
#include "time_generated.h"

namespace airsim_to_ros {

struct StereoImagePose;

struct StereoImagePose FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_HEADER = 4,
    VT_LEFT = 6,
    VT_RIGHT = 8,
    VT_POSE = 10
  };
  const Header *header() const {
    return GetPointer<const Header *>(VT_HEADER);
  }
  const StereoImage *left() const {
    return GetPointer<const StereoImage *>(VT_LEFT);
  }
  const StereoImage *right() const {
    return GetPointer<const StereoImage *>(VT_RIGHT);
  }
  const PoseRPY *pose() const {
    return GetPointer<const PoseRPY *>(VT_POSE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_HEADER) &&
           verifier.VerifyTable(header()) &&
           VerifyOffset(verifier, VT_LEFT) &&
           verifier.VerifyTable(left()) &&
           VerifyOffset(verifier, VT_RIGHT) &&
           verifier.VerifyTable(right()) &&
           VerifyOffset(verifier, VT_POSE) &&
           verifier.VerifyTable(pose()) &&
           verifier.EndTable();
  }
};

struct StereoImagePoseBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_header(flatbuffers::Offset<Header> header) {
    fbb_.AddOffset(StereoImagePose::VT_HEADER, header);
  }
  void add_left(flatbuffers::Offset<StereoImage> left) {
    fbb_.AddOffset(StereoImagePose::VT_LEFT, left);
  }
  void add_right(flatbuffers::Offset<StereoImage> right) {
    fbb_.AddOffset(StereoImagePose::VT_RIGHT, right);
  }
  void add_pose(flatbuffers::Offset<PoseRPY> pose) {
    fbb_.AddOffset(StereoImagePose::VT_POSE, pose);
  }
  explicit StereoImagePoseBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  StereoImagePoseBuilder &operator=(const StereoImagePoseBuilder &);
  flatbuffers::Offset<StereoImagePose> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<StereoImagePose>(end);
    return o;
  }
};

inline flatbuffers::Offset<StereoImagePose> CreateStereoImagePose(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<Header> header = 0,
    flatbuffers::Offset<StereoImage> left = 0,
    flatbuffers::Offset<StereoImage> right = 0,
    flatbuffers::Offset<PoseRPY> pose = 0) {
  StereoImagePoseBuilder builder_(_fbb);
  builder_.add_pose(pose);
  builder_.add_right(right);
  builder_.add_left(left);
  builder_.add_header(header);
  return builder_.Finish();
}

inline const airsim_to_ros::StereoImagePose *GetStereoImagePose(const void *buf) {
  return flatbuffers::GetRoot<airsim_to_ros::StereoImagePose>(buf);
}

inline bool VerifyStereoImagePoseBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<airsim_to_ros::StereoImagePose>(nullptr);
}

inline void FinishStereoImagePoseBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<airsim_to_ros::StereoImagePose> root) {
  fbb.Finish(root);
}

}  // namespace airsim_to_ros

#endif  // FLATBUFFERS_GENERATED_STEREOIMAGEPOSE_AIRSIM_TO_ROS_H_
