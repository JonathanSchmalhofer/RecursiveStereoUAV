// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_POSERPY_AIRSIM_TO_ROS_H_
#define FLATBUFFERS_GENERATED_POSERPY_AIRSIM_TO_ROS_H_

#include "flatbuffers/flatbuffers.h"

#include "OrientationRPY_generated.h"
#include "PointRPY_generated.h"

namespace airsim_to_ros {

struct PoseRPY;

struct PoseRPY FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_POSITION = 4,
    VT_ORIENTATION = 6
  };
  const PointRPY *position() const {
    return GetStruct<const PointRPY *>(VT_POSITION);
  }
  const OrientationRPY *orientation() const {
    return GetStruct<const OrientationRPY *>(VT_ORIENTATION);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<PointRPY>(verifier, VT_POSITION) &&
           VerifyField<OrientationRPY>(verifier, VT_ORIENTATION) &&
           verifier.EndTable();
  }
};

struct PoseRPYBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_position(const PointRPY *position) {
    fbb_.AddStruct(PoseRPY::VT_POSITION, position);
  }
  void add_orientation(const OrientationRPY *orientation) {
    fbb_.AddStruct(PoseRPY::VT_ORIENTATION, orientation);
  }
  explicit PoseRPYBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  PoseRPYBuilder &operator=(const PoseRPYBuilder &);
  flatbuffers::Offset<PoseRPY> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<PoseRPY>(end);
    return o;
  }
};

inline flatbuffers::Offset<PoseRPY> CreatePoseRPY(
    flatbuffers::FlatBufferBuilder &_fbb,
    const PointRPY *position = 0,
    const OrientationRPY *orientation = 0) {
  PoseRPYBuilder builder_(_fbb);
  builder_.add_orientation(orientation);
  builder_.add_position(position);
  return builder_.Finish();
}

}  // namespace airsim_to_ros

#endif  // FLATBUFFERS_GENERATED_POSERPY_AIRSIM_TO_ROS_H_
