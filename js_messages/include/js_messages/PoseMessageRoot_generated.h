// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_POSEMESSAGEROOT_AIRSIM_TO_ROS_H_
#define FLATBUFFERS_GENERATED_POSEMESSAGEROOT_AIRSIM_TO_ROS_H_

#include "flatbuffers/flatbuffers.h"

#include "Header_generated.h"
#include "time_generated.h"

namespace airsim_to_ros {

struct Point;

struct Orientation;

struct PoseMessage;

MANUALLY_ALIGNED_STRUCT(8) Point FLATBUFFERS_FINAL_CLASS {
 private:
  double x_;
  double y_;
  double z_;

 public:
  Point() {
    memset(this, 0, sizeof(Point));
  }
  Point(double _x, double _y, double _z)
      : x_(flatbuffers::EndianScalar(_x)),
        y_(flatbuffers::EndianScalar(_y)),
        z_(flatbuffers::EndianScalar(_z)) {
  }
  double x() const {
    return flatbuffers::EndianScalar(x_);
  }
  double y() const {
    return flatbuffers::EndianScalar(y_);
  }
  double z() const {
    return flatbuffers::EndianScalar(z_);
  }
};
STRUCT_END(Point, 24);

MANUALLY_ALIGNED_STRUCT(8) Orientation FLATBUFFERS_FINAL_CLASS {
 private:
  double roll_;
  double pitch_;
  double yaw_;

 public:
  Orientation() {
    memset(this, 0, sizeof(Orientation));
  }
  Orientation(double _roll, double _pitch, double _yaw)
      : roll_(flatbuffers::EndianScalar(_roll)),
        pitch_(flatbuffers::EndianScalar(_pitch)),
        yaw_(flatbuffers::EndianScalar(_yaw)) {
  }
  double roll() const {
    return flatbuffers::EndianScalar(roll_);
  }
  double pitch() const {
    return flatbuffers::EndianScalar(pitch_);
  }
  double yaw() const {
    return flatbuffers::EndianScalar(yaw_);
  }
};
STRUCT_END(Orientation, 24);

struct PoseMessage FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_HEADER = 4,
    VT_POSITION = 6,
    VT_ORIENTATION = 8
  };
  const Header *header() const {
    return GetPointer<const Header *>(VT_HEADER);
  }
  const Point *position() const {
    return GetStruct<const Point *>(VT_POSITION);
  }
  const Orientation *orientation() const {
    return GetStruct<const Orientation *>(VT_ORIENTATION);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_HEADER) &&
           verifier.VerifyTable(header()) &&
           VerifyField<Point>(verifier, VT_POSITION) &&
           VerifyField<Orientation>(verifier, VT_ORIENTATION) &&
           verifier.EndTable();
  }
};

struct PoseMessageBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_header(flatbuffers::Offset<Header> header) {
    fbb_.AddOffset(PoseMessage::VT_HEADER, header);
  }
  void add_position(const Point *position) {
    fbb_.AddStruct(PoseMessage::VT_POSITION, position);
  }
  void add_orientation(const Orientation *orientation) {
    fbb_.AddStruct(PoseMessage::VT_ORIENTATION, orientation);
  }
  explicit PoseMessageBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  PoseMessageBuilder &operator=(const PoseMessageBuilder &);
  flatbuffers::Offset<PoseMessage> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<PoseMessage>(end);
    return o;
  }
};

inline flatbuffers::Offset<PoseMessage> CreatePoseMessage(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<Header> header = 0,
    const Point *position = 0,
    const Orientation *orientation = 0) {
  PoseMessageBuilder builder_(_fbb);
  builder_.add_orientation(orientation);
  builder_.add_position(position);
  builder_.add_header(header);
  return builder_.Finish();
}

inline const airsim_to_ros::PoseMessage *GetPoseMessage(const void *buf) {
  return flatbuffers::GetRoot<airsim_to_ros::PoseMessage>(buf);
}

inline bool VerifyPoseMessageBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<airsim_to_ros::PoseMessage>(nullptr);
}

inline void FinishPoseMessageBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<airsim_to_ros::PoseMessage> root) {
  fbb.Finish(root);
}

}  // namespace airsim_to_ros

#endif  // FLATBUFFERS_GENERATED_POSEMESSAGEROOT_AIRSIM_TO_ROS_H_
